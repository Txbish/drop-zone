// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  password  String
  files     File[]
  folders   Folder[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Folder {
  id        String    @id @default(uuid())
  name      String
  parentId  String?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Folder?   @relation("FolderToFolder", fields: [parentId], references: [id])
  children  Folder[]  @relation("FolderToFolder")
  files     File[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model File {
  id            String   @id @default(uuid())
  originalName  String
  storedName    String   // This will store the Cloudinary public_id
  cloudinaryUrl String?  // Full Cloudinary URL (optional for backward compatibility)
  secureUrl     String?  // Secure HTTPS Cloudinary URL (optional for backward compatibility)
  mimeType      String
  size          Int
  folderId      String?
  folder        Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPublic      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
